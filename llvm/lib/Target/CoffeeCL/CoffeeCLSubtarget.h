//===-- CoffeeCLSubtarget.h - Define Subtarget for the CoffeeCL ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the CoffeeCL specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef CoffeeCLSUBTARGET_H
#define CoffeeCLSUBTARGET_H

#include "llvm/Target/TargetSubtargetInfo.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "CoffeeCLGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class CoffeeCLSubtarget : public CoffeeCLGenSubtargetInfo {
  virtual void anchor();

public:

  enum CoffeeCLABIEnum {
   UnknownABI, ABI32
  };

protected:

  enum CoffeeCLArchEnum {
    CoffeeCL32
  };

  // CoffeeCL architecture version
  CoffeeCLArchEnum CoffeeCLArchVersion;

  // CoffeeCL supported ABIs
  CoffeeCLABIEnum CoffeeCLABI;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  // IsSingleFloat - The target only supports single precision float
  // point operations. This enable the target to use all 32 32-bit
  // floating point registers instead of only using even ones.
  bool IsSingleFloat;

  // IsFP64bit - The target processor has 64-bit floating point registers.
  bool IsFP64bit;

  // IsFP64bit - General-purpose registers are 64 bits wide
  bool IsGP64bit;

  // HasVFPU - Processor has a vector floating point unit.
  bool HasVFPU;

  // isLinux - Target system is Linux. Is false we consider ELFOS for now.
  bool IsLinux;

  // UseSmallSection - Small section is used.
  bool UseSmallSection;

  /// Features related to the presence of specific instructions.

  // HasSEInReg - SEB and SEH (signext in register) instructions.
  bool HasSEInReg;

  // HasCondMov - Conditional mov (MOVZ, MOVN) instructions.
  bool HasCondMov;

  // HasMulDivAdd - Multiply add and sub (MADD, MADDu, MSUB, MSUBu)
  // instructions.
  bool HasMulDivAdd;

  // HasMinMax - MIN and MAX instructions.
  bool HasMinMax;

  // HasSwap - Byte and half swap instructions.
  bool HasSwap;

  // HasBitCount - Count leading '1' and '0' bits.
  bool HasBitCount;

  // HasFPIdx -- Floating point indexed load/store instructions.
  bool HasFPIdx;

  // InCoffeeCL16 -- can process CoffeeCL16 instructions
  bool InCoffeeCL16Mode;

  // HasDSP, HasDSPR2 -- supports DSP ASE.
  bool HasDSP, HasDSPR2;

  // IsAndroid -- target is android
  bool IsAndroid;

  bool IsCoProcessor0;

  bool IsCoProcessor1;

  bool IsCoProcessor2;

  bool IsCoProcessor3;

  InstrItineraryData InstrItins;

public:
  virtual bool enablePostRAScheduler(CodeGenOpt::Level OptLevel,
                                     AntiDepBreakMode& Mode,
                                     RegClassVector& CriticalPathRCs) const;


  bool isABI_CoffeeCL32() const { return CoffeeCLABI == CoffeeCL32; }

  unsigned getTargetABI() const { return CoffeeCLABI; }

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  CoffeeCLSubtarget(const std::string &TT, const std::string &CPU,
                const std::string &FS, bool islittle, Reloc::Model RM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool hasCoffeeCL32() const { return CoffeeCLArchVersion >= CoffeeCL32; }


  bool isCOP0() const { return IsCoProcessor0; }
  bool isCOP1() const { return IsCoProcessor1; }
  bool isCOP2() const { return IsCoProcessor2; }
  bool isCOP3() const { return IsCoProcessor3; }

  bool isLittle() const { return IsLittle; }
  bool isFP64bit() const { return IsFP64bit; }
  bool isGP64bit() const { return IsGP64bit; }
  bool isGP32bit() const { return !IsGP64bit; }
  bool isSingleFloat() const { return IsSingleFloat; }
  bool isNotSingleFloat() const { return !IsSingleFloat; }
  bool hasVFPU() const { return HasVFPU; }
  bool inCoffeeCL16Mode() const { return InCoffeeCL16Mode; }
  bool hasDSP() const { return HasDSP; }
  bool hasDSPR2() const { return HasDSPR2; }
  bool isAndroid() const { return IsAndroid; }
  bool isLinux() const { return IsLinux; }
  bool useSmallSection() const { return UseSmallSection; }

  bool hasStandardEncoding() const { return !inCoffeeCL16Mode(); }

  /// Features related to the presence of specific instructions.
  bool hasSEInReg()   const { return HasSEInReg; }
  bool hasCondMov()   const { return HasCondMov; }
  bool hasMulDivAdd() const { return HasMulDivAdd; }
  bool hasMinMax()    const { return HasMinMax; }
  bool hasSwap()      const { return HasSwap; }
  bool hasBitCount()  const { return HasBitCount; }
  bool hasFPIdx()     const { return HasFPIdx; }
};
} // End llvm namespace

#endif
